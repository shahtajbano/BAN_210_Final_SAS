MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 07, 2022" 
);
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:04:56" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                August 07, 2022
Time:                16:04:56
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1ZFH__G 
"C:\Users\shaht\OneDrive\Desktop\Final_project\Workspaces\EMWS1\MdlComp\EMSCORE.out" 
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1ZFH__G new;
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.12 seconds
      
22768      /* Generate assessment metadata, which will be used to generate assessment data step
22768    !  */
22769      /* code, such as retrieving names of temporary variables and summary variables,
22769    !  */
22770      /* labels, etc.  It is used in almost all the assessment computations such as lift,
22770    !  */
22771      /* roc, index, scoreDist and could be thought as a global variable in assessment
22771    !  */
22772      /* computation.
22772    !  */
22773      data work.ASSESS_0F8CBQ9_assessMeta_d69dY_;
MPRINT(EM_DIAGRAM):    data work.ASSESS_0F8CBQ9_assessMeta_d69dY_;
22774      length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32
22774    ! MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32
22774    ! RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32
22774    ! RESULT_MAX $32 RESULT_MAX_LABEL
22775         $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE
22775    !  $32;
MPRINT(EM_DIAGRAM):   length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY 
$32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL 
$100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX $32 RESULT_MAX_LABEL 
$100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
22776      VARIABLE = "Class";
MPRINT(EM_DIAGRAM):   VARIABLE = "Class";
22777      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
22778      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
22779      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
22780      LEVEL = '';
MPRINT(EM_DIAGRAM):   LEVEL = '';
22781      PROPERTY = "TARGET";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET";
22782      MEASUREMENT = "NOMINAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "NOMINAL";
22783      LAST_LEVEL = '';
MPRINT(EM_DIAGRAM):   LAST_LEVEL = '';
22784      GEN_VAR_IN_TEMP_DATA = "Class";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "Class";
22785      RESULT_MEAN = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "";
22786      RESULT_MEAN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "";
22787      RESULT_MIN = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "";
22788      RESULT_MIN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "";
22789      MIN_ADJUSTED = "";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "";
22790      RESULT_MAX = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "";
22791      RESULT_MAX_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "";
22792      MAX_ADJUSTED = "";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "";
22793      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
22794      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
22795      TEMPORARY_VARIABLE = "Class_dIzr4NMha7FrEez";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "Class_dIzr4NMha7FrEez";
22796      output;
MPRINT(EM_DIAGRAM):   output;
22797      VARIABLE = "F_Class_RECURRENCE_EVENTS";
MPRINT(EM_DIAGRAM):   VARIABLE = "F_Class_RECURRENCE_EVENTS";
22798      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
22799      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
22800      PARENT = "F_Class";
MPRINT(EM_DIAGRAM):   PARENT = "F_Class";
22801      LEVEL = "RECURRENCE-EVENTS";
MPRINT(EM_DIAGRAM):   LEVEL = "RECURRENCE-EVENTS";
22802      PROPERTY = "TARGET_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET_LEVEL";
22803      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
22804      LAST_LEVEL = "NO-RECURRENCE-EVENTS";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "NO-RECURRENCE-EVENTS";
22805      GEN_VAR_IN_TEMP_DATA = "F_Class_RECURREN_zh8i3fH7PDU4wAw";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "F_Class_RECURREN_zh8i3fH7PDU4wAw";
22806      RESULT_MEAN = "F_Class_RE_mean_lq7MA1UUYhoManQ";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "F_Class_RE_mean_lq7MA1UUYhoManQ";
22807      /* adjust for tied cases */
22808      RESULT_MEAN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "";
22809      RESULT_MIN = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "";
22810      RESULT_MIN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "";
22811      RESULT_MAX = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "";
22812      RESULT_MAX_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "";
22813      RESULT_COUNT = "NumberOfEvents";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "NumberOfEvents";
22814      RESULT_COUNT_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumEvent_vlabel,
22814    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "Number of Events";
22815      TEMPORARY_VARIABLE = "F_Class_RECURREN_UVb03f_gaqm7ElH";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "F_Class_RECURREN_UVb03f_gaqm7ElH";
22816      output;
MPRINT(EM_DIAGRAM):   output;
22817      VARIABLE = "F_Class_NO_RECURRENCE_EVENTS";
MPRINT(EM_DIAGRAM):   VARIABLE = "F_Class_NO_RECURRENCE_EVENTS";
22818      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
22819      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
22820      PARENT = "F_Class";
MPRINT(EM_DIAGRAM):   PARENT = "F_Class";
22821      LEVEL = "NO-RECURRENCE-EVENTS";
MPRINT(EM_DIAGRAM):   LEVEL = "NO-RECURRENCE-EVENTS";
22822      PROPERTY = "TARGET_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET_LEVEL";
22823      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
22824      LAST_LEVEL = "NO-RECURRENCE-EVENTS";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "NO-RECURRENCE-EVENTS";
22825      GEN_VAR_IN_TEMP_DATA = "F_Class_NO_RECUR_ePTONySZiYJ46fI";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "F_Class_NO_RECUR_ePTONySZiYJ46fI";
22826      RESULT_MEAN = "F_Class_NO_mean_3sDJraG1I1QcEPE";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "F_Class_NO_mean_3sDJraG1I1QcEPE";
22827      /* adjust for tied cases */
22828      RESULT_MEAN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "";
22829      RESULT_MIN = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "";
22830      RESULT_MIN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "";
22831      RESULT_MAX = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "";
22832      RESULT_MAX_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "";
22833      RESULT_COUNT = "NumberOfEvents";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "NumberOfEvents";
22834      RESULT_COUNT_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumEvent_vlabel,
22834    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "Number of Events";
22835      TEMPORARY_VARIABLE = "F_Class_NO_RECUR_Bi7aCgZtBQqf3pu";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "F_Class_NO_RECUR_Bi7aCgZtBQqf3pu";
22836      output;
MPRINT(EM_DIAGRAM):   output;
22837      VARIABLE = "P_Classrecurrence_events";
MPRINT(EM_DIAGRAM):   VARIABLE = "P_Classrecurrence_events";
22838      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
22839      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
22840      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
22841      LEVEL = "RECURRENCE-EVENTS";
MPRINT(EM_DIAGRAM):   LEVEL = "RECURRENCE-EVENTS";
22842      PROPERTY = "POSTERIOR_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "POSTERIOR_LEVEL";
22843      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
22844      LAST_LEVEL = "";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "";
22845      GEN_VAR_IN_TEMP_DATA = "P_Classrecurrence_events";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "P_Classrecurrence_events";
22846      RESULT_MEAN = "_meanP_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_meanP_";
22847      RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMean_vlabel,
22847    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Posterior Probability";
22848      RESULT_MIN = "_minP_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_minP_";
22849      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Posterior Probability";
22850      MIN_ADJUSTED = "P_Classr_minAdjusted_OPHKw8Drv";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "P_Classr_minAdjusted_OPHKw8Drv";
22851      RESULT_MAX = "_maxP_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_maxP_";
22852      RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Posterior Probability";
22853      MAX_ADJUSTED = "P_Classr_maxAdjusted_ygg42GGni";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "P_Classr_maxAdjusted_ygg42GGni";
22854      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
22855      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
22856      TEMPORARY_VARIABLE = "P_Classrecurrenc_Na0C__HNeZv9Twd";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "P_Classrecurrenc_Na0C__HNeZv9Twd";
22857      output;
MPRINT(EM_DIAGRAM):   output;
22858      VARIABLE = "P_Classno_recurrence_events";
MPRINT(EM_DIAGRAM):   VARIABLE = "P_Classno_recurrence_events";
22859      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
22860      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
22861      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
22862      LEVEL = "NO-RECURRENCE-EVENTS";
MPRINT(EM_DIAGRAM):   LEVEL = "NO-RECURRENCE-EVENTS";
22863      PROPERTY = "POSTERIOR_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "POSTERIOR_LEVEL";
22864      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
22865      LAST_LEVEL = "";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "";
22866      GEN_VAR_IN_TEMP_DATA = "P_Classno_recurrence_events";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "P_Classno_recurrence_events";
22867      RESULT_MEAN = "_meanP_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_meanP_";
22868      RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMean_vlabel,
22868    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Posterior Probability";
22869      RESULT_MIN = "_minP_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_minP_";
22870      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Posterior Probability";
22871      MIN_ADJUSTED = "P_Classn_minAdjusted_h3UIiKcyj";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "P_Classn_minAdjusted_h3UIiKcyj";
22872      RESULT_MAX = "_maxP_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_maxP_";
22873      RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Posterior Probability";
22874      MAX_ADJUSTED = "P_Classn_maxAdjusted_SzFAh5WSn";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "P_Classn_maxAdjusted_SzFAh5WSn";
22875      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
22876      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
22877      TEMPORARY_VARIABLE = "P_Classno_recurr_dLAz5OefRqBenep";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "P_Classno_recurr_dLAz5OefRqBenep";
22878      output;
MPRINT(EM_DIAGRAM):   output;
22879      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.ASSESS_0F8CBQ9_ASSESSMETA_D69DY_ has 5 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

22880      /* Generate temporary dataset and obtain summary statistics such as total number of
22880    !   */
22881      /* obserations, frequency of target.  However, summary statistics for class
22881    ! reporting */
22882      /* variabels are not computed here since if there exist class reporting variables,
22882    !   */
22883      /* then PROC DMDB will be called. And there is no need to compute interval reporting
22883    !   */
22884      /* summary statisitcs, if any.
22884    !   */
22885      data work.ASSESS_0F8CBQ9_normSD_TCLgK8(drop=
22886      _numberOfObservation_
22887      _levelFrequency_1
22888      _levelFrequency_2
22889      )
22890      work.ASSESS_0F8CBQ9_meansAndTi_fIbCr_ (keep=
22891      _numberOfObservation_
22892      _levelFrequency_1
22893      _levelFrequency_2
22894      );
MPRINT(EM_DIAGRAM):    data work.ASSESS_0F8CBQ9_normSD_TCLgK8(drop= _numberOfObservation_ 
_levelFrequency_1 _levelFrequency_2 ) work.ASSESS_0F8CBQ9_meansAndTi_fIbCr_ (keep= 
_numberOfObservation_ _levelFrequency_1 _levelFrequency_2 );
22895      set EMWS1.Neural_TRAIN(
22896      where=(
22897      (Class ^= ' ')
22898      )
22899      ) end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_TRAIN( where=( (Class ^= ' ') ) ) end=_lastObservation_;
22900      keep frequency_h5sLsh;
MPRINT(EM_DIAGRAM):   keep frequency_h5sLsh;
22901      frequency_h5sLsh = 1;
MPRINT(EM_DIAGRAM):   frequency_h5sLsh = 1;
22902      keep I_Class F_Class;
MPRINT(EM_DIAGRAM):   keep I_Class F_Class;
22903      keep F_Class_RECURREN_zh8i3fH7PDU4wAw;
MPRINT(EM_DIAGRAM):   keep F_Class_RECURREN_zh8i3fH7PDU4wAw;
22904      if (F_Class = 'RECURRENCE-EVENTS') then do;
MPRINT(EM_DIAGRAM):   if (F_Class = 'RECURRENCE-EVENTS') then do;
22905      F_Class_RECURREN_zh8i3fH7PDU4wAw = 1;
MPRINT(EM_DIAGRAM):   F_Class_RECURREN_zh8i3fH7PDU4wAw = 1;
22906      end;
MPRINT(EM_DIAGRAM):   end;
22907      else do;
MPRINT(EM_DIAGRAM):   else do;
22908      F_Class_RECURREN_zh8i3fH7PDU4wAw = 0;
MPRINT(EM_DIAGRAM):   F_Class_RECURREN_zh8i3fH7PDU4wAw = 0;
22909      end;
MPRINT(EM_DIAGRAM):   end;
22910      keep F_Class_NO_RECUR_ePTONySZiYJ46fI;
MPRINT(EM_DIAGRAM):   keep F_Class_NO_RECUR_ePTONySZiYJ46fI;
22911      if (F_Class = 'NO-RECURRENCE-EVENTS') then do;
MPRINT(EM_DIAGRAM):   if (F_Class = 'NO-RECURRENCE-EVENTS') then do;
22912      F_Class_NO_RECUR_ePTONySZiYJ46fI = 1;
MPRINT(EM_DIAGRAM):   F_Class_NO_RECUR_ePTONySZiYJ46fI = 1;
22913      end;
MPRINT(EM_DIAGRAM):   end;
22914      else do;
MPRINT(EM_DIAGRAM):   else do;
22915      F_Class_NO_RECUR_ePTONySZiYJ46fI = 0;
MPRINT(EM_DIAGRAM):   F_Class_NO_RECUR_ePTONySZiYJ46fI = 0;
22916      end;
MPRINT(EM_DIAGRAM):   end;
22917      keep P_Classrecurrence_events;
MPRINT(EM_DIAGRAM):   keep P_Classrecurrence_events;
22918      keep P_Classno_recurrence_events;
MPRINT(EM_DIAGRAM):   keep P_Classno_recurrence_events;
22919      output work.ASSESS_0F8CBQ9_normSD_TCLgK8;
MPRINT(EM_DIAGRAM):   output work.ASSESS_0F8CBQ9_normSD_TCLgK8;
22920      keep _numberOfObservation_;
MPRINT(EM_DIAGRAM):   keep _numberOfObservation_;
22921      retain _numberOfObservation_ 0;
MPRINT(EM_DIAGRAM):   retain _numberOfObservation_ 0;
22922      _numberOfObservation_ + frequency_h5sLsh;
MPRINT(EM_DIAGRAM):   _numberOfObservation_ + frequency_h5sLsh;
22923      keep _levelFrequency_1;
MPRINT(EM_DIAGRAM):   keep _levelFrequency_1;
22924      retain _levelFrequency_1 0;
MPRINT(EM_DIAGRAM):   retain _levelFrequency_1 0;
22925      if (F_Class = 'RECURRENCE-EVENTS') then do;
MPRINT(EM_DIAGRAM):   if (F_Class = 'RECURRENCE-EVENTS') then do;
22926      _levelFrequency_1 + frequency_h5sLsh;
MPRINT(EM_DIAGRAM):   _levelFrequency_1 + frequency_h5sLsh;
22927      end;
MPRINT(EM_DIAGRAM):   end;
22928      keep _levelFrequency_2;
MPRINT(EM_DIAGRAM):   keep _levelFrequency_2;
22929      retain _levelFrequency_2 0;
MPRINT(EM_DIAGRAM):   retain _levelFrequency_2 0;
22930      if (F_Class = 'NO-RECURRENCE-EVENTS') then do;
MPRINT(EM_DIAGRAM):   if (F_Class = 'NO-RECURRENCE-EVENTS') then do;
22931      _levelFrequency_2 + frequency_h5sLsh;
MPRINT(EM_DIAGRAM):   _levelFrequency_2 + frequency_h5sLsh;
22932      end;
MPRINT(EM_DIAGRAM):   end;
22933      if _lastObservation_ then do;
MPRINT(EM_DIAGRAM):   if _lastObservation_ then do;
22934      output work.ASSESS_0F8CBQ9_meansAndTi_fIbCr_;
MPRINT(EM_DIAGRAM):   output work.ASSESS_0F8CBQ9_meansAndTi_fIbCr_;
22935      end;
MPRINT(EM_DIAGRAM):   end;
22936      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 199 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
NOTE: There were 199 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 199 observations read from the data set EMWS1.NEURAL_TRAIN.
      WHERE Class not = ' ';
NOTE: The data set WORK.ASSESS_0F8CBQ9_NORMSD_TCLGK8 has 199 observations and 7 variables.
NOTE: The data set WORK.ASSESS_0F8CBQ9_MEANSANDTI_FIBCR_ has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      

22937      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
22938      set EMWS1.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK;
22939      where MODEL = "Neural" and TARGET = "Class" and dataRole="TRAIN";
MPRINT(EM_DIAGRAM):   where MODEL = "Neural" and TARGET = "Class" and dataRole="TRAIN";
22940      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set EMWS1.MDLCOMP_EMRANK.
      WHERE (MODEL='Neural') and (TARGET='Class') and (dataRole='TRAIN');
NOTE: The data set WORK._EMRANK has 20 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

22941      data work._augment;
MPRINT(EM_DIAGRAM):    data work._augment;
22942      do BIN= 1 to 20;
MPRINT(EM_DIAGRAM):   do BIN= 1 to 20;
22943      DECILE = BIN*5;
MPRINT(EM_DIAGRAM):   DECILE = BIN*5;
22944      output;
MPRINT(EM_DIAGRAM):   output;
22945      end;
MPRINT(EM_DIAGRAM):   end;
22946      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._AUGMENT has 20 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

22947      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):   data WORK._EMRANK;
22948      merge WORK._AUGMENT WORK._EMRANK;
MPRINT(EM_DIAGRAM):   merge WORK._AUGMENT WORK._EMRANK;
22949      by BIN;
MPRINT(EM_DIAGRAM):   by BIN;
22950      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._AUGMENT.
NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

22951      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
22952      set WORK._EMRANK end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK end=_lastObservation_;
22953      retain _previousMinP_ _previousMaxP_;
MPRINT(EM_DIAGRAM):   retain _previousMinP_ _previousMaxP_;
22954      retain _group_ 1;
MPRINT(EM_DIAGRAM):   retain _group_ 1;
22955      keep event;
MPRINT(EM_DIAGRAM):   keep event;
22956      keep bin _cutoff_ _group_;
MPRINT(EM_DIAGRAM):   keep bin _cutoff_ _group_;
22957      if (bin > 1) then do;
MPRINT(EM_DIAGRAM):   if (bin > 1) then do;
22958      bin = bin - 1;
MPRINT(EM_DIAGRAM):   bin = bin - 1;
22959      _cutoff_ = (_maxP_ + _previousMinP_) / 2;
MPRINT(EM_DIAGRAM):   _cutoff_ = (_maxP_ + _previousMinP_) / 2;
22960      if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
22961      /* tied */
22962      _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_/*-1E-6*/
22963      ));
MPRINT(EM_DIAGRAM):   _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_ ));
22964      end;
MPRINT(EM_DIAGRAM):   end;
22965      else if (abs(_maxP_ - _minP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _minP_) < 1E-6) then do;
22966      /* next tied */
22967      _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_/*+ 1E-6*/
22968      ));
MPRINT(EM_DIAGRAM):   _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_ 
));
22969      end;
MPRINT(EM_DIAGRAM):   end;
22970      output;
MPRINT(EM_DIAGRAM):   output;
22971      *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 
1E-6) then do;
22972      * _group_ + 1;
MPRINT(EM_DIAGRAM):   * _group_ + 1;
22973      *end;
MPRINT(EM_DIAGRAM):   *end;
22974      if (_maxP_ le _previousMinP_ - 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (_maxP_ le _previousMinP_ - 1E-6) then do;
22975      _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
22976      end;
MPRINT(EM_DIAGRAM):   end;
22977      else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
22978      if (abs(_maxP_ - _minP_) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_maxP_ - _minP_) > 1E-6) then do;
22979      _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
22980      end;
MPRINT(EM_DIAGRAM):   end;
22981      end;
MPRINT(EM_DIAGRAM):   end;
22982      bin + 1;
MPRINT(EM_DIAGRAM):   bin + 1;
22983      /* correct the previous change */
22984      end;
MPRINT(EM_DIAGRAM):   end;
22985      if (_lastObservation_) then do;
MPRINT(EM_DIAGRAM):   if (_lastObservation_) then do;
22986      _cutoff_ = .;
MPRINT(EM_DIAGRAM):   _cutoff_ = .;
22987      output;
MPRINT(EM_DIAGRAM):   output;
22988      end;
MPRINT(EM_DIAGRAM):   end;
22989      _previousMinP_ = _minP_;
MPRINT(EM_DIAGRAM):   _previousMinP_ = _minP_;
22990      _previousMaxP_ = _maxP_;
MPRINT(EM_DIAGRAM):   _previousMaxP_ = _maxP_;
22991      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

22992      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
22993      set WORK._EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK;
22994      by _group_;
MPRINT(EM_DIAGRAM):   by _group_;
22995      retain _start_;
MPRINT(EM_DIAGRAM):   retain _start_;
22996      if (first._group_) then do;
MPRINT(EM_DIAGRAM):   if (first._group_) then do;
22997      _start_ = _n_;
MPRINT(EM_DIAGRAM):   _start_ = _n_;
22998      end;
MPRINT(EM_DIAGRAM):   end;
22999      if (last._group_) then do;
MPRINT(EM_DIAGRAM):   if (last._group_) then do;
23000      _end_ = _n_;
MPRINT(EM_DIAGRAM):   _end_ = _n_;
23001      output;
MPRINT(EM_DIAGRAM):   output;
23002      end;
MPRINT(EM_DIAGRAM):   end;
23003      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 19 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of 
      this session.
23004      filename emflow
23004    ! "C:\Users\shaht\OneDrive\Desktop\Final_project\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.
23004    ! sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\Users\shaht\OneDrive\Desktop\Final_project\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring NEURAL_TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23005      *------------------------------------------------------------*;
23006      * MdlComp: Scoring NEURAL_TRAIN data;
23007      *------------------------------------------------------------*;
23008      data EMWS1.MdlComp_TRAIN
23009      / view=EMWS1.MdlComp_TRAIN
23010      ;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_TRAIN / view=EMWS1.MdlComp_TRAIN ;
23011      set EMWS1.Neural_TRAIN
23012      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_TRAIN ;
23013      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\Users\shaht\OneDrive\Desktop\Final_project\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas.
23014     +drop _temp_;
MPRINT(EM_DIAGRAM):   drop _temp_;
23015     +if (P_Classrecurrence_events ge 0.99997423993044) then do;
MPRINT(EM_DIAGRAM):   if (P_Classrecurrence_events ge 0.99997423993044) then do;
23016     +b_Class = 1;
MPRINT(EM_DIAGRAM):   b_Class = 1;
23017     +end;
MPRINT(EM_DIAGRAM):   end;
23018     +else
23019     +if (P_Classrecurrence_events ge 0.98082907003633) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.98082907003633) then do;
23020     +b_Class = 2;
MPRINT(EM_DIAGRAM):   b_Class = 2;
23021     +end;
MPRINT(EM_DIAGRAM):   end;
23022     +else
23023     +if (P_Classrecurrence_events ge 0.68861826642603) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.68861826642603) then do;
23024     +b_Class = 3;
MPRINT(EM_DIAGRAM):   b_Class = 3;
23025     +end;
MPRINT(EM_DIAGRAM):   end;
23026     +else
23027     +if (P_Classrecurrence_events ge 0.32517894111538) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.32517894111538) then do;
23028     +b_Class = 4;
MPRINT(EM_DIAGRAM):   b_Class = 4;
23029     +end;
MPRINT(EM_DIAGRAM):   end;
23030     +else
23031     +if (P_Classrecurrence_events ge 0.28075396969449) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.28075396969449) then do;
23032     +b_Class = 5;
MPRINT(EM_DIAGRAM):   b_Class = 5;
23033     +end;
MPRINT(EM_DIAGRAM):   end;
23034     +else
23035     +if (P_Classrecurrence_events ge 0.26028861145292) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.26028861145292) then do;
23036     +b_Class = 6;
MPRINT(EM_DIAGRAM):   b_Class = 6;
23037     +end;
MPRINT(EM_DIAGRAM):   end;
23038     +else
23039     +if (P_Classrecurrence_events ge 0.25631102063238) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.25631102063238) then do;
23040     +b_Class = 7;
MPRINT(EM_DIAGRAM):   b_Class = 7;
23041     +end;
MPRINT(EM_DIAGRAM):   end;
23042     +else
23043     +if (P_Classrecurrence_events ge 0.25544447039289) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.25544447039289) then do;
23044     +b_Class = 8;
MPRINT(EM_DIAGRAM):   b_Class = 8;
23045     +end;
MPRINT(EM_DIAGRAM):   end;
23046     +else
23047     +if (P_Classrecurrence_events ge 0.25314992106194) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.25314992106194) then do;
23048     +b_Class = 9;
MPRINT(EM_DIAGRAM):   b_Class = 9;
23049     +end;
MPRINT(EM_DIAGRAM):   end;
23050     +else
23051     +if (P_Classrecurrence_events ge 0.24850889141301) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.24850889141301) then do;
23052     +b_Class = 10;
MPRINT(EM_DIAGRAM):   b_Class = 10;
23053     +end;
MPRINT(EM_DIAGRAM):   end;
23054     +else
23055     +if (P_Classrecurrence_events ge 0.23604992678102) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.23604992678102) then do;
23056     +b_Class = 11;
MPRINT(EM_DIAGRAM):   b_Class = 11;
23057     +end;
MPRINT(EM_DIAGRAM):   end;
23058     +else
23059     +if (P_Classrecurrence_events ge 0.22465606910278) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.22465606910278) then do;
23060     +b_Class = 12;
MPRINT(EM_DIAGRAM):   b_Class = 12;
23061     +end;
MPRINT(EM_DIAGRAM):   end;
23062     +else
23063     +if (P_Classrecurrence_events ge 0.19365094547494) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.19365094547494) then do;
23064     +b_Class = 13;
MPRINT(EM_DIAGRAM):   b_Class = 13;
23065     +end;
MPRINT(EM_DIAGRAM):   end;
23066     +else
23067     +if (P_Classrecurrence_events ge 0.12838285328328) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.12838285328328) then do;
23068     +b_Class = 14;
MPRINT(EM_DIAGRAM):   b_Class = 14;
23069     +end;
MPRINT(EM_DIAGRAM):   end;
23070     +else
23071     +if (P_Classrecurrence_events ge 0.05511773177) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.05511773177) then do;
23072     +b_Class = 15;
MPRINT(EM_DIAGRAM):   b_Class = 15;
23073     +end;
MPRINT(EM_DIAGRAM):   end;
23074     +else
23075     +if (P_Classrecurrence_events ge 0.01516070638852) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.01516070638852) then do;
23076     +b_Class = 16;
MPRINT(EM_DIAGRAM):   b_Class = 16;
23077     +end;
MPRINT(EM_DIAGRAM):   end;
23078     +else
23079     +if (P_Classrecurrence_events ge 0.00189560571317) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.00189560571317) then do;
23080     +b_Class = 17;
MPRINT(EM_DIAGRAM):   b_Class = 17;
23081     +end;
MPRINT(EM_DIAGRAM):   end;
23082     +else
23083     +if (P_Classrecurrence_events ge 1.5301246853945E-6) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 1.5301246853945E-6) then do;
23084     +b_Class = 18;
MPRINT(EM_DIAGRAM):   b_Class = 18;
23085     +end;
MPRINT(EM_DIAGRAM):   end;
23086     +else
23087     +do;
MPRINT(EM_DIAGRAM):   else do;
23088     +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
23089     +b_Class = floor(19 + 2*_temp_);
MPRINT(EM_DIAGRAM):   b_Class = floor(19 + 2*_temp_);
23090     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
23091      run;

NOTE: DATA STEP view saved on file EMWS1.MDLCOMP_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.19 seconds
      cpu time            0.07 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.21 seconds
      cpu time            0.09 seconds
      

MPRINT(EM_DIAGRAM):   quit;
23092      quit;
23093      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
23094      filename emflow
23094    ! "C:\Users\shaht\OneDrive\Desktop\Final_project\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.
23094    ! sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\Users\shaht\OneDrive\Desktop\Final_project\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring NEURAL_VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23095      *------------------------------------------------------------*;
23096      * MdlComp: Scoring NEURAL_VALIDATE data;
23097      *------------------------------------------------------------*;
23098      data EMWS1.MdlComp_VALIDATE
23099      / view=EMWS1.MdlComp_VALIDATE
23100      ;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_VALIDATE / view=EMWS1.MdlComp_VALIDATE ;
23101      set EMWS1.Neural_VALIDATE
23102      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_VALIDATE ;
23103      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\Users\shaht\OneDrive\Desktop\Final_project\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas.
23104     +drop _temp_;
MPRINT(EM_DIAGRAM):   drop _temp_;
23105     +if (P_Classrecurrence_events ge 0.99997423993044) then do;
MPRINT(EM_DIAGRAM):   if (P_Classrecurrence_events ge 0.99997423993044) then do;
23106     +b_Class = 1;
MPRINT(EM_DIAGRAM):   b_Class = 1;
23107     +end;
MPRINT(EM_DIAGRAM):   end;
23108     +else
23109     +if (P_Classrecurrence_events ge 0.98082907003633) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.98082907003633) then do;
23110     +b_Class = 2;
MPRINT(EM_DIAGRAM):   b_Class = 2;
23111     +end;
MPRINT(EM_DIAGRAM):   end;
23112     +else
23113     +if (P_Classrecurrence_events ge 0.68861826642603) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.68861826642603) then do;
23114     +b_Class = 3;
MPRINT(EM_DIAGRAM):   b_Class = 3;
23115     +end;
MPRINT(EM_DIAGRAM):   end;
23116     +else
23117     +if (P_Classrecurrence_events ge 0.32517894111538) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.32517894111538) then do;
23118     +b_Class = 4;
MPRINT(EM_DIAGRAM):   b_Class = 4;
23119     +end;
MPRINT(EM_DIAGRAM):   end;
23120     +else
23121     +if (P_Classrecurrence_events ge 0.28075396969449) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.28075396969449) then do;
23122     +b_Class = 5;
MPRINT(EM_DIAGRAM):   b_Class = 5;
23123     +end;
MPRINT(EM_DIAGRAM):   end;
23124     +else
23125     +if (P_Classrecurrence_events ge 0.26028861145292) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.26028861145292) then do;
23126     +b_Class = 6;
MPRINT(EM_DIAGRAM):   b_Class = 6;
23127     +end;
MPRINT(EM_DIAGRAM):   end;
23128     +else
23129     +if (P_Classrecurrence_events ge 0.25631102063238) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.25631102063238) then do;
23130     +b_Class = 7;
MPRINT(EM_DIAGRAM):   b_Class = 7;
23131     +end;
MPRINT(EM_DIAGRAM):   end;
23132     +else
23133     +if (P_Classrecurrence_events ge 0.25544447039289) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.25544447039289) then do;
23134     +b_Class = 8;
MPRINT(EM_DIAGRAM):   b_Class = 8;
23135     +end;
MPRINT(EM_DIAGRAM):   end;
23136     +else
23137     +if (P_Classrecurrence_events ge 0.25314992106194) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.25314992106194) then do;
23138     +b_Class = 9;
MPRINT(EM_DIAGRAM):   b_Class = 9;
23139     +end;
MPRINT(EM_DIAGRAM):   end;
23140     +else
23141     +if (P_Classrecurrence_events ge 0.24850889141301) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.24850889141301) then do;
23142     +b_Class = 10;
MPRINT(EM_DIAGRAM):   b_Class = 10;
23143     +end;
MPRINT(EM_DIAGRAM):   end;
23144     +else
23145     +if (P_Classrecurrence_events ge 0.23604992678102) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.23604992678102) then do;
23146     +b_Class = 11;
MPRINT(EM_DIAGRAM):   b_Class = 11;
23147     +end;
MPRINT(EM_DIAGRAM):   end;
23148     +else
23149     +if (P_Classrecurrence_events ge 0.22465606910278) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.22465606910278) then do;
23150     +b_Class = 12;
MPRINT(EM_DIAGRAM):   b_Class = 12;
23151     +end;
MPRINT(EM_DIAGRAM):   end;
23152     +else
23153     +if (P_Classrecurrence_events ge 0.19365094547494) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.19365094547494) then do;
23154     +b_Class = 13;
MPRINT(EM_DIAGRAM):   b_Class = 13;
23155     +end;
MPRINT(EM_DIAGRAM):   end;
23156     +else
23157     +if (P_Classrecurrence_events ge 0.12838285328328) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.12838285328328) then do;
23158     +b_Class = 14;
MPRINT(EM_DIAGRAM):   b_Class = 14;
23159     +end;
MPRINT(EM_DIAGRAM):   end;
23160     +else
23161     +if (P_Classrecurrence_events ge 0.05511773177) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.05511773177) then do;
23162     +b_Class = 15;
MPRINT(EM_DIAGRAM):   b_Class = 15;
23163     +end;
MPRINT(EM_DIAGRAM):   end;
23164     +else
23165     +if (P_Classrecurrence_events ge 0.01516070638852) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.01516070638852) then do;
23166     +b_Class = 16;
MPRINT(EM_DIAGRAM):   b_Class = 16;
23167     +end;
MPRINT(EM_DIAGRAM):   end;
23168     +else
23169     +if (P_Classrecurrence_events ge 0.00189560571317) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 0.00189560571317) then do;
23170     +b_Class = 17;
MPRINT(EM_DIAGRAM):   b_Class = 17;
23171     +end;
MPRINT(EM_DIAGRAM):   end;
23172     +else
23173     +if (P_Classrecurrence_events ge 1.5301246853945E-6) then do;
MPRINT(EM_DIAGRAM):   else if (P_Classrecurrence_events ge 1.5301246853945E-6) then do;
23174     +b_Class = 18;
MPRINT(EM_DIAGRAM):   b_Class = 18;
23175     +end;
MPRINT(EM_DIAGRAM):   end;
23176     +else
23177     +do;
MPRINT(EM_DIAGRAM):   else do;
23178     +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
23179     +b_Class = floor(19 + 2*_temp_);
MPRINT(EM_DIAGRAM):   b_Class = floor(19 + 2*_temp_);
23180     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
23181      run;

NOTE: DATA STEP view saved on file EMWS1.MDLCOMP_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.NEURAL_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_DIAGRAM):   quit;
23182      quit;
23183      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
23184      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23185      * MdlComp: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * MdlComp: Computing metadata for TRAIN data;
23186      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.MdlComp_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.MdlComp_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.MdlComp_TRAIN out=WORK.M10GKF73 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M10GKF73;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M10GKF73(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M10GKF73;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M10GKF73;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M374E90Q NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M374E90Q;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M374E90Q;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2QQI9AM(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M374E90Q;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M374E90Q;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M374E90Q;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then 
do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 
'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M374E90Q;
MPRINT(EMADVISECOLUMNS):   set WORK.M374E90Q;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Neural_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "MdlComp";
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      
NOTE: View EMWS1.MDLCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.06 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
